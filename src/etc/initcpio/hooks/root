run_hook() {
	hook_name="root";
	indentation="";
	
	sleep_time=3;
	
	
	#mountpoint "/new_root"
	
	#ls /
	#ls "/new_root"
	
	#echo "RAM{ram}:${ram}"
	
	#echo "Sleeping for ""${sleep_time}"" seconds"
	#sleep "${sleep_time}" 
	
	#return
	#exit
	
	msg "${hook_name}:root=[""${root}""]"
	msg "${hook_name}:rootfstype[""${rootfstype}""]"
	msg "${hook_name}:rootflags[""${rootflags}""]"
	
	echo "Sleeping for ""${sleep_time}"" seconds";
	sleep "${sleep_time}" 
	
	#if [ "${ram}" = "1" -a -n "${root}" ]
	if [ "${extroot}" = "1" ]
	then
		#set
		
		#echo "Sleeping for ""${sleep_time}"" seconds";
		#sleep "${sleep_time}";
		
		#echo "{UNISON}::""${UNISON}""::";
		#echo "{HOME}::""${HOME}""::";
		
		#echo "Sleeping for ""${sleep_time}"" seconds";
		#sleep "${sleep_time}";
		
		
		#local root_dev root_fs_type source_root source ramsize ramsizeunits ramfstype unison_cfg_d unison_cfg_d_temp
		
		# "${source_root}" is used by the kernel; the kernel mounts it as the actual root.
		source_root="/new_root"
		#source="/root_source"
		temporary="/root_temp"
		#unison_cfg_d="/etc/unison"
		#unison_cfg_d_temp="/etc/unison_temp"	# Could be removed.
		
		echo "YES";
		echo "Sleeping for ""${sleep_time}"" seconds";
		sleep "${sleep_time}";
		
		if [ -z "${root}" ]
		then
			msg "root is not set ... trying to continue ...";
		fi
		
		mkdir --parents "${temporary}";
		
		## Just check if "${source_root}" is already a mountpoint.
		#mountpoint --quiet "${temporary}"
		#if [ "$?" = "0" ]
		#then
		#	msg "${temporary}"" is a mountpoint";
		#fi
		
		# Unmount if already mounted.
		umount "${source_root}";
		
		# Remove UUID= if it is present.
		if test "${root%%=*}" = "UUID"
		then
			root="/dev/disk/by-uuid/""${root#UUID=}";
		#else
		#	root="${root}"
		fi
		
		if [ -z "${rootfstype}" ]
		then
			rootfstype="auto";
		#else
		#	rootfstype="${rootfstype}"
		fi
		
		echo -n -e "${indentation}""${hook_name}"": Mounting the custom root file system (temporarily) ... \n";
		if [ -z "${rootflags}" ]
		then
			#rootflags="";
			msg 'mount --no-mtab --types '"${rootfstype}"' --source '"${root}"' --target '"${temporary}"'';
			mount --no-mtab --types "${rootfstype}" --source "${root}" --target "${temporary}";
		else
			msg 'mount --no-mtab --types '"${rootfstype}"' --options '"${rootflags}"' --source '"${root}"' --target '"${temporary}"'';
			mount --no-mtab --types "${rootfstype}" --options "${rootflags}" --source "${root}" --target "${temporary}";
		fi
		
		if [ "$?" = 0 ]
		then
			echo -e -n "succeeded\n";
		else
			echo -e -n "failed\n";
		fi
		##msg "${indentation}""${hook_name}"": Making the root available."
		#msg "${indentation}""${hook_name}"": Mounting the custom root file system ...";
		#mount --no-mtab --types "${rootfstype}" --options "${rootflags}" "${root}" "${temporary}";
		
		
		#if [ -z "${root}" ]
		#then
		#	msg "${indentation}""${hook_name}"": Warning: \"/new_root\" is not a mountpoint."
		#fi
		
		##msg "Root FS: Creating any needed directories..."
		#mkdir --parents "${temporary}" "${source}"
		
		#echo "Sleeping for ""${sleep_time}"" seconds"
		#sleep "${sleep_time}"
		
		mount_handler="_rootfs_mount_handler";
		
		echo "ROOT FS DONE 1";
	else
		echo "NO";
	fi
	
	echo "Sleeping for ""${sleep_time}"" seconds"
	sleep "${sleep_time}" 
}

_rootfs_mount_handler() {
	echo "P1:""${1}"":P1"
	
	echo -n -e "${indentation}""${hook_name}"": Mounting the RAM file system as the future root (temporary -> actual) ... "
	#mkdir --parents "${1}"
	#mount -t "${ramdisk_ram_fs_type}" -o rbind "${ramdisk_ram_mount_location}" "${1}"
	mount --no-mtab --options rbind "${temporary}" "${1}"
	if [ "$?" = 0 ]
	then
		echo -e -n "succeeded\n";
	else
		echo -e -n "failed\n";
	fi
	
	# Disable mounting all the pseudo filesystems possible.
	#systemctl mask dev-hugepages.mount
	
	# Disable mounting the /tmp pseudo filesystem.
	#systemctl mask tmp.mount
	
	# Unmount the /dev/shm pseudo filesystem.
	#umount /dev/shm
	
	#umount "/root_ram/root_source"
	echo "Sleeping for ""${sleep_time}"" seconds"
	sleep "${sleep_time}"
	
	echo "RAM DISK DONE 2"
}
